-- SQLBook: Markup
# <span style="color:darkblue"> Create SQL Table from Scratch </span>
-- SQLBook: Markup
<font size = "5">

Delete existing table
-- SQLBook: Code
DROP TABLE IF EXISTS drivers;
-- SQLBook: Markup
<font size = "5">

Create empty table from codebook
-- SQLBook: Code
CREATE TABLE drivers(
    driver_id int,
    driver_name varchar(30),
    nationality varchar(15),
    victories int
);    
-- SQLBook: Markup
<font size="5"> 

Add rows to table
-- SQLBook: Code
INSERT INTO drivers  VALUES (1, 'Lewis Hamilton','British',103);

INSERT INTO drivers  VALUES (4, 'Fernando Alonso', 'Spanish',32);

INSERT INTO drivers  VALUES (3, 'Sebastian Vettel', 'German',91);

INSERT INTO drivers  VALUES (2, 'Michael Schumacher', 'German',53);

-- SQLBook: Markup
# <span style="color:darkblue"> II. Dataset Operations </span>
-- SQLBook: Markup
Extracting columns from table
-- SQLBook: Code
SELECT driver_id, nationality FROM drivers;
-- SQLBook: Markup
Extract all columns from table
-- SQLBook: Code
SELECT * FROM drivers;
-- SQLBook: Markup
Subsetting rows
-- SQLBook: Code
SELECT * FROM drivers
WHERE nationality = 'German';

SELECT * FROM drivers
WHERE (nationality = 'United States') OR (nationality = 'Indian');

SELECT * FROM drivers
WHERE (nationality = 'German') AND (driver_id = 2);

-- SQLBook: Markup
Aggregate
-- SQLBook: Code
SELECT SUM(victories) AS sum_victories,
       COUNT(*) AS num_rows,
       AVG(victories) AS mean_victories,
       MIN(victories) AS min_victories,
       MAX(victories) AS max_victories
FROM drivers;
-- SQLBook: Markup
Sort
-- SQLBook: Code

SELECT * FROM drivers
ORDER BY victories ASC;

SELECT * FROM drivers
ORDER BY victories DESC;
-- SQLBook: Code
SELECT * FROM drivers
WHERE nationality = 'German';
-- SQLBook: Markup
# <span style="color:darkblue"> Groupby + Chaining </span>
-- SQLBook: Markup
Groupby + Aggregate
-- SQLBook: Code
SELECT nationality,
       SUM(victories) AS sum_victories,
       AVG(victories) AS mean_victories,
       MIN(victories) AS min_victories,
       MAX(victories) AS max_victories
FROM drivers
GROUP BY nationality;
-- SQLBook: Markup
Subsetting **after** aggregating
-- SQLBook: Code
SELECT nationality,
       SUM(victories) AS sum_victories,
       AVG(victories) AS mean_victories,
       MIN(victories) AS min_victories,
       MAX(victories) AS max_victories
FROM drivers
GROUP BY nationality
HAVING SUM(victories) > 50;
-- SQLBook: Markup
Subsetting **before** and **after** aggregating
-- SQLBook: Code
SELECT nationality,
       SUM(victories) AS sum_victories,
       AVG(victories) AS mean_victories,
       MIN(victories) AS min_victories,
       MAX(victories) AS max_victories
FROM drivers
WHERE nationality = 'German'
GROUP BY nationality
HAVING SUM(victories) > 50;
-- SQLBook: Markup
# <span style="color:darkblue"> Create Headers for Empty Table </span>
-- SQLBook: Markup
United States Congress dataset

-- SQLBook: Markup
Create table from codebook/dictionary
-- SQLBook: Code
DROP TABLE IF EXISTS us_congress_members;

CREATE TABLE us_congress_members (
        member_id    int PRIMARY KEY,
               full_name    varchar(30),
        last_name    varchar(30),
        member_title varchar(30),
        state        varchar(30),
        party_name   varchar(30),
        chamber      varchar(30)
);

-- SQLBook: Code
DROP TABLE IF EXISTS bills_actions;

CREATE TABLE bills_actions (
        "Congress"  int NOT NULL,
        bill_number int ,
        bill_type   varchar(30),
        action      varchar(1000),
        main_action varchar(50),
        object      varchar(30),
        member_id   int
);
-- SQLBook: Markup
Create a new table for "bills_subjects"
-- SQLBook: Code
DROP TABLE IF EXISTS bills_subjects;

CREATE TABLE bills_subjects (
    "Congress"      int,
    bill_number     int,
    bill_type       varchar(30),
    bill_subject    varchar(30)
);
-- SQLBook: Markup
# <span style="color:darkblue"> Import CSV into SQL </span>

-- SQLBook: Markup
Viewing the US Congress dataset
-- SQLBook: Code
COPY us_congress_members
FROM 'C:\Users\...\data\us_congress_members.csv'
WITH (DELIMITER ',', FORMAT csv, HEADER MATCH);





-- SQLBook: Markup
Copy the table "bills_actions.csv"

-- SQLBook: Code
COPY bills_actions
FROM 'C:\Users\Michael\Documents\GitHub\qtm151spring2023\Lecture 18\data\bills_actions.csv'
WITH (DELIMITER ',', FORMAT csv, HEADER MATCH);
-- SQLBook: Markup
# <span style="color:darkblue"> Merge Data </span>
-- SQLBook: Markup
Count unique rows
-- SQLBook: Code
SELECT COUNT(DISTINCT party_name) AS num_distinct_parties,
       COUNT(*) AS num_members       
FROM us_congress_members

-- SQLBook: Markup
Display unique rows
-- SQLBook: Code
SELECT party_name       
FROM us_congress_members
GROUP BY party_name
-- SQLBook: Markup
Count members of group
-- SQLBook: Code
SELECT party_name,       
       COUNT(*) AS num_members       
FROM us_congress_members
GROUP BY party_name;
-- SQLBook: Markup
Merge Databases
-- SQLBook: Code

SELECT * 
FROM bills_actions
LEFT JOIN us_congress_members
ON us_congress_members.member_id  = bills_actions.member_id;

